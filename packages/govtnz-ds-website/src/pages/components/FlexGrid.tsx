// @autogenerated

// WARNING THIS FILE IS AUTOGENERATED! DO NOT EDIT!

// Developer note: these files are treated as templates and called from prebuild.js
// They shouldn't be imported and used directly.

import React from 'react';
import { Link } from 'gatsby';
import onChangeGenerator from '../../commons/onChangeGenerator';
import P from '@govtnz/ds/build/react-ts/P.tsx';
import '@govtnz/ds/build/css/P.css';
import H2 from '@govtnz/ds/build/react-ts/H2.tsx';
import '@govtnz/ds/build/css/H2.css';
import FlexContainer from '@govtnz/ds/build/react-ts/FlexContainer.tsx';
import '@govtnz/ds/build/css/FlexContainer.css';
import FlexRow from '@govtnz/ds/build/react-ts/FlexRow.tsx';
import '@govtnz/ds/build/css/FlexRow.css';
import FlexColumn from '@govtnz/ds/build/react-ts/FlexColumn.tsx';
import '@govtnz/ds/build/css/FlexColumn.css';
import Ul from '@govtnz/ds/build/react-ts/Ul.tsx';
import '@govtnz/ds/build/css/Ul.css';
import Li from '@govtnz/ds/build/react-ts/Li.tsx';
import '@govtnz/ds/build/css/Li.css';
import components__FlexGrid from '../../commons/examples/components__FlexGrid';
// Indirect relative import because this template is output to src/pages/components so it needs to step back to `commons`.
import ComponentPage from '../../commons/component-page';
import ComponentCode from '../../commons/component-code';
import Example from '../../commons/Example';
import ExampleContainer from '../../commons/ExampleContainer';
import ExampleHeading from '../../commons/ExampleHeading';
import ExampleSection from '../../commons/ExampleSection';

const PageContent = (props) => <React.Fragment><P styleSize="large">Use our flexible grid to structure website content. The grid is mobile-first, powered by Flexbox, and based on a 12-column system. The grid includes gutters, column spanning, 4 breakpoints, and column alignment.</P>

<H2 {...onChangeGenerator(H2)} styleSize="large" id="how-it-works">How it works</H2>
<p>The grid system uses a series of containers, rows, and columns to lay out and align content.</p>
<p>The following layout (non-responsive) example creates three equal-width columns on tablet, desktop, and widescreen devices using our predefined grid classes. Those columns are centered in the page with the parent flex container.</p>
<div className="flexgrid-preview">
<ExampleContainer {...onChangeGenerator(ExampleContainer)}>
    <ExampleHeading {...onChangeGenerator(ExampleHeading)}>Example of 3-column Flexbox grid</ExampleHeading>
    <Example {...onChangeGenerator(Example)} code={components__FlexGrid[0]} >
        <FlexContainer {...onChangeGenerator(FlexContainer)} width="fixed">
            <FlexRow {...onChangeGenerator(FlexRow)}>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> .g-flex-col .g-flex-col-md-4 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> .g-flex-col .g-flex-col-md-4 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> .g-flex-col .g-flex-col-md-4 </FlexColumn>
            </FlexRow>
        </FlexContainer>
    </Example>
</ExampleContainer>
</div>

<h3 id="containers">Containers</h3>
<p>Flex container width can be fixed or fluid. The fixed container fills the available width until it reaches the maximum of 1366 pixels.</p>
<p>The fluid container has no constraints and fills all of the available space. This is ideal for display uses, such as widescreen HD display.</p>
<h3 id="rows">Rows</h3>
<p>All columns must have a flex row as a parent.</p>
<h3 id="columns">Columns</h3>
<p>Our 12-column grid has gutters, column spanning, four breakpoints, and column alignment.</p>
<p>The &quot;md&quot; in the above example refers to the breakpoint size. Here&#39;s the full range of breakpoint options:</p>
<Ul {...onChangeGenerator(Ul)} bulleted>
<Li {...onChangeGenerator(Li)}>xs = minimum width of 0 pixels</Li>
<Li {...onChangeGenerator(Li)}>sm = minimum width of 768 pixels</Li>
<Li {...onChangeGenerator(Li)}>md = minimum width of 1024 pixels</Li>
<Li {...onChangeGenerator(Li)}>lg = minimum width of 1200 pixels</Li>
</Ul>
<p>We also support offsets to allow flexibility of design, essentially allowing blank columns to assist aesthetics in layout.</p>
<p>The following example shows all the possible variants of column widths.</p>
<div className="flexgrid-preview">
<ExampleContainer {...onChangeGenerator(ExampleContainer)}>
    <ExampleHeading {...onChangeGenerator(ExampleHeading)}>Example of Flexgrid column variants</ExampleHeading>
    <Example {...onChangeGenerator(Example)} code={components__FlexGrid[1]} >
        <FlexContainer {...onChangeGenerator(FlexContainer)} width="fixed">
            <FlexRow {...onChangeGenerator(FlexRow)}>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> .g-flex-col .g-flex-col-md-4 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> .g-flex-col .g-flex-col-md-4 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> .g-flex-col .g-flex-col-md-4 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="6" sm="6" md="6" lg="6"> .g-flex-col .g-flex-col-md-6 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="6" sm="6" md="6" lg="6"> .g-flex-col .g-flex-col-md-6 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="12" sm="12" md="12" lg="12"> .g-flex-col .g-flex-col-lg-12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="1" sm="1" md="1" lg="1"> 1/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="11" sm="11" md="11" lg="11"> 11/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="2" sm="2" md="2" lg="2"> 2/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="10" sm="10" md="10" lg="10"> 10/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="3" sm="3" md="3" lg="3"> 3/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="9" sm="9" md="9" lg="9"> 9/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> 4/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="8" sm="8" md="8" lg="8"> 8/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="5" sm="5" md="5" lg="5"> 5/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="7" sm="7" md="7" lg="7"> 7/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="6" sm="6" md="6" lg="6"> 6/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="6" sm="6" md="6" lg="6"> 6/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="7" sm="7" md="7" lg="7"> 7/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="5" sm="5" md="5" lg="5"> 5/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="8" sm="8" md="8" lg="8"> 8/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="4" sm="4" md="4" lg="4"> 4/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="9" sm="9" md="9" lg="9"> 9/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="3" sm="3" md="3" lg="3"> 3/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="10" sm="10" md="10" lg="10"> 10/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="2" sm="2" md="2" lg="2"> 2/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="11" sm="11" md="11" lg="11"> 11/12 </FlexColumn>
                <FlexColumn {...onChangeGenerator(FlexColumn)} xs="1" sm="1" md="1" lg="1"> 1/12 </FlexColumn>
            </FlexRow>
        </FlexContainer>
    </Example>
</ExampleContainer>
</div>

<h2 id="why-use-a-flexbox-grid">Why use a Flexbox grid?</h2>
<p>We chose Flexbox because it&#39;s implemented by our supported browsers. We have labelled this grid type &quot;Flex&quot; so that we can add other grid types later. We&#39;re considering adding support for CSS Grid.</p>
<h2 id="credit">Credit</h2>
<p>Original HTML and CSS derived from <a href="http://flexboxgrid.com/">FlexboxGrid</a> version 6.3.2. Licensed under <a href="https://github.com/kristoferjoseph/flexboxgrid">the Apache Licence version 2.0</a>.</p>
</React.Fragment>

export default function Code(props) {
  return (
    <ComponentPage
      title={"FlexGrid"}
      id={"FlexGrid"}
      pageProps={props}
      PageContent={PageContent}
    />
  );
}
